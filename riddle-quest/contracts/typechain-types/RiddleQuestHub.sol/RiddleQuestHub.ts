/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RiddleQuestHubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createRiddle"
      | "getQuest"
      | "nextQuestId"
      | "status"
      | "submitProof"
      | "verifier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProofAttempt" | "QuestCreated" | "QuestSolved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createRiddle",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextQuestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "status",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProof",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createRiddle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextQuestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
}

export namespace ProofAttemptEvent {
  export type InputTuple = [
    questId: BigNumberish,
    solver: AddressLike,
    ok: boolean
  ];
  export type OutputTuple = [questId: bigint, solver: string, ok: boolean];
  export interface OutputObject {
    questId: bigint;
    solver: string;
    ok: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuestCreatedEvent {
  export type InputTuple = [
    questId: BigNumberish,
    title: string,
    bounty: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    questId: bigint,
    title: string,
    bounty: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    questId: bigint;
    title: string;
    bounty: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuestSolvedEvent {
  export type InputTuple = [
    questId: BigNumberish,
    solver: AddressLike,
    bounty: BigNumberish
  ];
  export type OutputTuple = [questId: bigint, solver: string, bounty: bigint];
  export interface OutputObject {
    questId: bigint;
    solver: string;
    bounty: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RiddleQuestHub extends BaseContract {
  connect(runner?: ContractRunner | null): RiddleQuestHub;
  waitForDeployment(): Promise<this>;

  interface: RiddleQuestHubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createRiddle: TypedContractMethod<
    [
      _title: string,
      _prompt: string,
      _solutionHash: BytesLike,
      _deadline: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  getQuest: TypedContractMethod<
    [questId: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, string] & {
        title: string;
        prompt: string;
        bounty: bigint;
        deadline: bigint;
        _status: bigint;
        winner: string;
      }
    ],
    "view"
  >;

  nextQuestId: TypedContractMethod<[], [bigint], "view">;

  status: TypedContractMethod<[questId: BigNumberish], [bigint], "view">;

  submitProof: TypedContractMethod<
    [questId: BigNumberish, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createRiddle"
  ): TypedContractMethod<
    [
      _title: string,
      _prompt: string,
      _solutionHash: BytesLike,
      _deadline: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getQuest"
  ): TypedContractMethod<
    [questId: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, string] & {
        title: string;
        prompt: string;
        bounty: bigint;
        deadline: bigint;
        _status: bigint;
        winner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextQuestId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "status"
  ): TypedContractMethod<[questId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitProof"
  ): TypedContractMethod<
    [questId: BigNumberish, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ProofAttempt"
  ): TypedContractEvent<
    ProofAttemptEvent.InputTuple,
    ProofAttemptEvent.OutputTuple,
    ProofAttemptEvent.OutputObject
  >;
  getEvent(
    key: "QuestCreated"
  ): TypedContractEvent<
    QuestCreatedEvent.InputTuple,
    QuestCreatedEvent.OutputTuple,
    QuestCreatedEvent.OutputObject
  >;
  getEvent(
    key: "QuestSolved"
  ): TypedContractEvent<
    QuestSolvedEvent.InputTuple,
    QuestSolvedEvent.OutputTuple,
    QuestSolvedEvent.OutputObject
  >;

  filters: {
    "ProofAttempt(uint256,address,bool)": TypedContractEvent<
      ProofAttemptEvent.InputTuple,
      ProofAttemptEvent.OutputTuple,
      ProofAttemptEvent.OutputObject
    >;
    ProofAttempt: TypedContractEvent<
      ProofAttemptEvent.InputTuple,
      ProofAttemptEvent.OutputTuple,
      ProofAttemptEvent.OutputObject
    >;

    "QuestCreated(uint256,string,uint256,uint256)": TypedContractEvent<
      QuestCreatedEvent.InputTuple,
      QuestCreatedEvent.OutputTuple,
      QuestCreatedEvent.OutputObject
    >;
    QuestCreated: TypedContractEvent<
      QuestCreatedEvent.InputTuple,
      QuestCreatedEvent.OutputTuple,
      QuestCreatedEvent.OutputObject
    >;

    "QuestSolved(uint256,address,uint256)": TypedContractEvent<
      QuestSolvedEvent.InputTuple,
      QuestSolvedEvent.OutputTuple,
      QuestSolvedEvent.OutputObject
    >;
    QuestSolved: TypedContractEvent<
      QuestSolvedEvent.InputTuple,
      QuestSolvedEvent.OutputTuple,
      QuestSolvedEvent.OutputObject
    >;
  };
}

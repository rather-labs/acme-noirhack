/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../../common";
import type {
  RiddleQuestFactory,
  RiddleQuestFactoryInterface,
} from "../../RiddleQuestFactory.sol/RiddleQuestFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVerifier",
        name: "_verifier",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "questId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "BountyClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "questId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bounty",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "solutionHash",
        type: "bytes32",
      },
    ],
    name: "QuestCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "questId",
        type: "uint256",
      },
    ],
    name: "QuestSolved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "bounties",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_riddle",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "_solutionHash",
        type: "bytes32",
      },
    ],
    name: "createRiddle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getMetadata",
    outputs: [
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_questId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_lowerOpenQuestId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_questId",
        type: "uint256",
      },
    ],
    name: "getQuestMetadata",
    outputs: [
      {
        internalType: "bytes32",
        name: "_solutionHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_bounty",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_riddle",
        type: "string",
      },
      {
        internalType: "bool",
        name: "_solved",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lowerOpenQuestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "questId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "riddle",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "solutionHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "solved",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_questId",
        type: "uint256",
      },
    ],
    name: "submitGuess",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0604052604051610c32380380610c32833981016040819052602091603a565b600060048190556005556001600160a01b03166080526068565b600060208284031215604b57600080fd5b81516001600160a01b0381168114606157600080fd5b9392505050565b608051610ba26100906000396000818160a30152818161017401526104010152610ba26000f3fe60806040526004361061008c5760003560e01c80632b7ac3f3146100915780632c5868b5146100e257806334a834ce1461012257806344a22c36146101465780637a5b4f591461015c5780639a90ba46146101bb5780639e2ed9ad146101e8578063a17e041b14610215578063b77334b214610237578063dc2f874414610267578063f2ffc30914610294575b600080fd5b34801561009d57600080fd5b506100c57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100ee57600080fd5b506101126100fd36600461075b565b60036020526000908152604090205460ff1681565b60405190151581526020016100d9565b34801561012e57600080fd5b5061013860055481565b6040519081526020016100d9565b34801561015257600080fd5b5061013860045481565b34801561016857600080fd5b506101966004546005547f000000000000000000000000000000000000000000000000000000000000000092565b604080516001600160a01b0390941684526020840192909252908201526060016100d9565b3480156101c757600080fd5b506101db6101d636600461075b565b6102a7565b6040516100d991906107ba565b3480156101f457600080fd5b5061013861020336600461075b565b60016020526000908152604090205481565b34801561022157600080fd5b506102356102303660046107d4565b610341565b005b34801561024357600080fd5b5061025761025236600461075b565b610553565b6040516100d9949392919061084b565b34801561027357600080fd5b5061013861028236600461075b565b60006020819052908152604090205481565b6102356102a2366004610893565b610628565b600260205260009081526040902080546102c09061094b565b80601f01602080910402602001604051908101604052809291908181526020018280546102ec9061094b565b80156103395780601f1061030e57610100808354040283529160200191610339565b820191906000526020600020905b81548152906001019060200180831161031c57829003601f168201915b505050505081565b60008181526003602052604090205460ff161561039c5760405162461bcd60e51b8152602060048201526014602482015273145d595cdd08185b1c9958591e481cdbdb1d995960621b60448201526064015b60405180910390fd5b604080516001808252818301909252600091602080830190803683375050506000838152600160205260408120548251929350918391906103df576103df610985565b6020908102919091010152604051633a94343960e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ea50d0e49061043a9087908790869060040161099b565b602060405180830381865afa925050508015610473575060408051601f3d908101601f1916820190925261047091810190610a16565b60015b6104bb5760405162461bcd60e51b8152602060048201526019602482015278141c9bdbd9881d995c9a599a58d85d1a5bdb8819985a5b1959603a1b6044820152606401610393565b5060008281526003602052604090819020805460ff19166001179055517fdf0a51f149bda50bfee1bc536ef1f869302b89ae91d38e0296cfe0fe95dcf77e906105079084815260200190565b60405180910390a1600554820361054d575b60055460009081526003602052604090205460ff161561054d576005805490600061054383610a38565b9190505550610519565b50505050565b600081815260016020908152604080832054838352818420546002845282852060039094529184205483548594606094869493909260ff9091169082906105999061094b565b80601f01602080910402602001604051908101604052809291908181526020018280546105c59061094b565b80156106125780601f106105e757610100808354040283529160200191610612565b820191906000526020600020905b8154815290600101906020018083116105f557829003601f168201915b5050505050915093509350935093509193509193565b6000341161066a5760405162461bcd60e51b815260206004820152600f60248201526e109bdd5b9d1e481c995c5d5a5c9959608a1b6044820152606401610393565b806106b05760405162461bcd60e51b815260206004820152601660248201527514dbdb1d5d1a5bdb881a185cda081c995c5d5a5c995960521b6044820152606401610393565b600480549060006106c083610a38565b90915550506004805460009081526001602090815260408083208590559254825260029052206106f08382610aae565b5060045460009081526020819052604081203490556005549003610715576004546005555b6004546040805191825234602083015281018290527f4bd3612c87b5c4c439463768f70ccc8a6a26983fdd648246f7c3f7efd07025879060600160405180910390a15050565b60006020828403121561076d57600080fd5b5035919050565b6000815180845260005b8181101561079a5760208185018101518683018201520161077e565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006107cd6020830184610774565b9392505050565b6000806000604084860312156107e957600080fd5b83356001600160401b038111156107ff57600080fd5b8401601f8101861361081057600080fd5b80356001600160401b0381111561082657600080fd5b86602082840101111561083857600080fd5b6020918201979096509401359392505050565b84815283602082015260806040820152600061086a6080830185610774565b9050821515606083015295945050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156108a657600080fd5b82356001600160401b038111156108bc57600080fd5b8301601f810185136108cd57600080fd5b80356001600160401b038111156108e6576108e661087d565b604051601f8201601f19908116603f011681016001600160401b03811182821017156109145761091461087d565b60405281815282820160200187101561092c57600080fd5b8160208401602083013760006020928201830152969401359450505050565b600181811c9082168061095f57607f821691505b60208210810361097f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60408152826040820152828460608301376000606084830101526000601f19601f8501168201606081016060848303016020850152808551808352608084019150602087019350600092505b80831015610a0a57835182526020820191506020840193506001830192506109e7565b50979650505050505050565b600060208284031215610a2857600080fd5b815180151581146107cd57600080fd5b600060018201610a5857634e487b7160e01b600052601160045260246000fd5b5060010190565b601f821115610aa957806000526020600020601f840160051c81016020851015610a865750805b601f840160051c820191505b81811015610aa65760008155600101610a92565b50505b505050565b81516001600160401b03811115610ac757610ac761087d565b610adb81610ad5845461094b565b84610a5f565b6020601f821160018114610b0f5760008315610af75750848201515b600019600385901b1c1916600184901b178455610aa6565b600084815260208120601f198516915b82811015610b3f5787850151825560209485019460019092019101610b1f565b5084821015610b5d5786840151600019600387901b60f8161c191681555b50505050600190811b0190555056fea26469706673582212209f9961d69143abc0a996f2546d341197477a4f9c8b8bd87040e4bce8d2f6df7364736f6c634300081c0033";

type RiddleQuestFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RiddleQuestFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RiddleQuestFactory__factory extends ContractFactory {
  constructor(...args: RiddleQuestFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _verifier: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_verifier, overrides || {});
  }
  override deploy(
    _verifier: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(_verifier, overrides || {}) as Promise<
      RiddleQuestFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RiddleQuestFactory__factory {
    return super.connect(runner) as RiddleQuestFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RiddleQuestFactoryInterface {
    return new Interface(_abi) as RiddleQuestFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RiddleQuestFactory {
    return new Contract(address, _abi, runner) as unknown as RiddleQuestFactory;
  }
}

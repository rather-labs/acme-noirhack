/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../../common";
import type {
  RiddleQuest,
  RiddleQuestInterface,
} from "../../RiddleQuest.sol/RiddleQuest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_solutionHash",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
      {
        internalType: "string",
        name: "_prompt",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "solver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "ok",
        type: "bool",
      },
    ],
    name: "ProofAttempt",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bounty",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "QuestInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "solver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bounty",
        type: "uint256",
      },
    ],
    name: "QuestSolved",
    type: "event",
  },
  {
    inputs: [],
    name: "bounty",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deadline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFullMetadata",
    outputs: [
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
      {
        internalType: "string",
        name: "_prompt",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_bounty",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256",
      },
      {
        internalType: "enum RiddleQuest.Status",
        name: "_status",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_winner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "prompt",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "solutionHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "solved",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "status",
    outputs: [
      {
        internalType: "enum RiddleQuest.Status",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
      {
        internalType: "bytes32[]",
        name: "_publicInputs",
        type: "bytes32[]",
      },
    ],
    name: "submitProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "title",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052604051610dfc380380610dfc833981016040819052610022916101a7565b600034116100685760405162461bcd60e51b815260206004820152600f60248201526e109bdd5b9d1e481c995c5d5a5c9959608a1b604482015260640160405180910390fd5b6001600160a01b03851660805260a0849052600061008684826102ce565b50600161009383826102ce565b5060028190553460038190556040517f31af9e90daf88948fa96decf56496ea26c2f4a96611e227250524ff408ec5dd9916100d291869190859061038c565b60405180910390a150505050506103ce565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101155781810151838201526020016100fd565b50506000910152565b600082601f83011261012f57600080fd5b81516001600160401b03811115610148576101486100e4565b604051601f8201601f19908116603f011681016001600160401b0381118282101715610176576101766100e4565b60405281815283820160200185101561018e57600080fd5b61019f8260208301602087016100fa565b949350505050565b600080600080600060a086880312156101bf57600080fd5b85516001600160a01b03811681146101d657600080fd5b6020870151604088015191965094506001600160401b038111156101f957600080fd5b6102058882890161011e565b606088015190945090506001600160401b0381111561022357600080fd5b61022f8882890161011e565b6080979097015195989497509295949392505050565b600181811c9082168061025957607f821691505b60208210810361027957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102c957806000526020600020601f840160051c810160208510156102a65750805b601f840160051c820191505b818110156102c657600081556001016102b2565b50505b505050565b81516001600160401b038111156102e7576102e76100e4565b6102fb816102f58454610245565b8461027f565b6020601f82116001811461032f57600083156103175750848201515b600019600385901b1c1916600184901b1784556102c6565b600084815260208120601f198516915b8281101561035f578785015182556020948501946001909201910161033f565b508482101561037d5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60608152600084518060608401526103ab8160808501602089016100fa565b60208301949094525060408101919091526080601f909201601f19160101919050565b60805160a0516109fc61040060003960008181610117015261049f01526000818160d8015261053701526109fc6000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c8063200d2ed21461009e57806329dcb0cf146100bc5780632b7ac3f3146100d357806331dcbc5c146101125780634a79d50c14610139578063799320bb1461014e5780637c65d71114610172578063943dfef11461017a578063b4c96aeb14610183578063dfbf53ae1461019d578063fc40415e146101b0575b600080fd5b6100a66101c5565b6040516100b39190610750565b60405180910390f35b6100c560025481565b6040519081526020016100b3565b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100b3565b6100c57f000000000000000000000000000000000000000000000000000000000000000081565b610141610203565b6040516100b391906107aa565b60045461016290600160a01b900460ff1681565b60405190151581526020016100b3565b610141610291565b6100c560035481565b61018b61029e565b6040516100b3969594939291906107c4565b6004546100fa906001600160a01b031681565b6101c36101be366004610821565b6103f5565b005b600454600090600160a01b900460ff16156101e05750600190565b600254158015906101f2575060025442115b156101fd5750600290565b50600090565b60008054610210906108f0565b80601f016020809104026020016040519081016040528092919081815260200182805461023c906108f0565b80156102895780601f1061025e57610100808354040283529160200191610289565b820191906000526020600020905b81548152906001019060200180831161026c57829003601f168201915b505050505081565b60018054610210906108f0565b606080600080600080600060016003546002546102b96101c5565b60045485546001600160a01b039091169086906102d5906108f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610301906108f0565b801561034e5780601f106103235761010080835404028352916020019161034e565b820191906000526020600020905b81548152906001019060200180831161033157829003601f168201915b50505050509550848054610361906108f0565b80601f016020809104026020016040519081016040528092919081815260200182805461038d906108f0565b80156103da5780601f106103af576101008083540402835291602001916103da565b820191906000526020600020905b8154815290600101906020018083116103bd57829003601f168201915b50505050509450955095509550955095509550909192939495565b60006103ff6101c5565b600281111561041057610410610718565b146104535760405162461bcd60e51b815260206004820152600e60248201526d28bab2b9ba103737ba1037b832b760911b60448201526064015b60405180910390fd5b6001811461049d5760405162461bcd60e51b8152602060048201526017602482015276084c2c840e0eac4d8d2c640d2dce0eae840d8cadccee8d604b1b604482015260640161044a565b7f0000000000000000000000000000000000000000000000000000000000000000828260008181106104d1576104d161092a565b905060200201351461051d5760405162461bcd60e51b81526020600482015260156024820152740a0eac4d8d2c640d2dce0eae840dad2e6dac2e8c6d605b1b604482015260640161044a565b604051633a94343960e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ea50d0e490610572908890889088908890600401610940565b602060405180830381865afa15801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b391906109a4565b604051811515815290915033907f6c06d627c9c2d73d9e353bcae122d41586f165eaa33cad734078da84becf29109060200160405180910390a2806106305760405162461bcd60e51b815260206004820152601360248201527215995c9a599a58d85d1a5bdb8819985a5b1959606a1b604482015260640161044a565b600480546001600160a81b03191633908117600160a01b179091556003546040519081527f4ca721307ace72ea5490b5ccac3e085f6ae7d92ec849a08e650bbcb3c6a3fa2c9060200160405180910390a260035460405160009133918381818185875af1925050503d80600081146106c4576040519150601f19603f3d011682016040523d82523d6000602084013e6106c9565b606091505b50509050806107105760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b604482015260640161044a565b505050505050565b634e487b7160e01b600052602160045260246000fd5b6003811061074c57634e487b7160e01b600052602160045260246000fd5b9052565b6020810161075e828461072e565b92915050565b6000815180845260005b8181101561078a5760208185018101518683018201520161076e565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006107bd6020830184610764565b9392505050565b60c0815260006107d760c0830189610764565b82810360208401526107e98189610764565b915050856040830152846060830152610805608083018561072e565b6001600160a01b039290921660a0919091015295945050505050565b6000806000806040858703121561083757600080fd5b84356001600160401b0381111561084d57600080fd5b8501601f8101871361085e57600080fd5b80356001600160401b0381111561087457600080fd5b87602082840101111561088657600080fd5b6020918201955093508501356001600160401b038111156108a657600080fd5b8501601f810187136108b757600080fd5b80356001600160401b038111156108cd57600080fd5b8760208260051b84010111156108e257600080fd5b949793965060200194505050565b600181811c9082168061090457607f821691505b60208210810361092457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6040815283604082015283856060830137600060608583018101829052601f19601f8701168301838103820160208501529081018490526001600160fb1b0384111561098b57600080fd5b8360051b80866080840137016080019695505050505050565b6000602082840312156109b657600080fd5b815180151581146107bd57600080fdfea26469706673582212205c25516e8128d912bf1125cbca6786d78984870e5ac734bc3aabcd339d99809964736f6c634300081c0033";

type RiddleQuestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RiddleQuestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RiddleQuest__factory extends ContractFactory {
  constructor(...args: RiddleQuestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _verifier: AddressLike,
    _solutionHash: BytesLike,
    _title: string,
    _prompt: string,
    _deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _verifier,
      _solutionHash,
      _title,
      _prompt,
      _deadline,
      overrides || {}
    );
  }
  override deploy(
    _verifier: AddressLike,
    _solutionHash: BytesLike,
    _title: string,
    _prompt: string,
    _deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _verifier,
      _solutionHash,
      _title,
      _prompt,
      _deadline,
      overrides || {}
    ) as Promise<
      RiddleQuest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RiddleQuest__factory {
    return super.connect(runner) as RiddleQuest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RiddleQuestInterface {
    return new Interface(_abi) as RiddleQuestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): RiddleQuest {
    return new Contract(address, _abi, runner) as unknown as RiddleQuest;
  }
}

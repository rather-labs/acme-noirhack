/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RiddleQuestFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bounties"
      | "createRiddle"
      | "getMetadata"
      | "getQuestMetadata"
      | "lowerOpenQuestId"
      | "questId"
      | "riddle"
      | "solutionHash"
      | "solved"
      | "submitGuess"
      | "verifier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BountyClaimed" | "QuestCreated" | "QuestSolved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bounties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRiddle",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lowerOpenQuestId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "questId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "riddle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "solutionHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "solved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitGuess",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bounties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRiddle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lowerOpenQuestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "questId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riddle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "solutionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "solved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitGuess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
}

export namespace BountyClaimedEvent {
  export type InputTuple = [questId: BigNumberish, winner: AddressLike];
  export type OutputTuple = [questId: bigint, winner: string];
  export interface OutputObject {
    questId: bigint;
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuestCreatedEvent {
  export type InputTuple = [
    questId: BigNumberish,
    bounty: BigNumberish,
    solutionHash: BytesLike
  ];
  export type OutputTuple = [
    questId: bigint,
    bounty: bigint,
    solutionHash: string
  ];
  export interface OutputObject {
    questId: bigint;
    bounty: bigint;
    solutionHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuestSolvedEvent {
  export type InputTuple = [questId: BigNumberish];
  export type OutputTuple = [questId: bigint];
  export interface OutputObject {
    questId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RiddleQuestFactory extends BaseContract {
  connect(runner?: ContractRunner | null): RiddleQuestFactory;
  waitForDeployment(): Promise<this>;

  interface: RiddleQuestFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bounties: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  createRiddle: TypedContractMethod<
    [_riddle: string, _solutionHash: BytesLike],
    [void],
    "payable"
  >;

  getMetadata: TypedContractMethod<
    [],
    [
      [string, bigint, bigint] & {
        _verifier: string;
        _questId: bigint;
        _lowerOpenQuestId: bigint;
      }
    ],
    "view"
  >;

  getQuestMetadata: TypedContractMethod<
    [_questId: BigNumberish],
    [
      [string, bigint, string, boolean] & {
        _solutionHash: string;
        _bounty: bigint;
        _riddle: string;
        _solved: boolean;
      }
    ],
    "view"
  >;

  lowerOpenQuestId: TypedContractMethod<[], [bigint], "view">;

  questId: TypedContractMethod<[], [bigint], "view">;

  riddle: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  solutionHash: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  solved: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  submitGuess: TypedContractMethod<
    [_proof: BytesLike, _questId: BigNumberish],
    [void],
    "nonpayable"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bounties"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "createRiddle"
  ): TypedContractMethod<
    [_riddle: string, _solutionHash: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getMetadata"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, bigint] & {
        _verifier: string;
        _questId: bigint;
        _lowerOpenQuestId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuestMetadata"
  ): TypedContractMethod<
    [_questId: BigNumberish],
    [
      [string, bigint, string, boolean] & {
        _solutionHash: string;
        _bounty: bigint;
        _riddle: string;
        _solved: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lowerOpenQuestId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "questId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "riddle"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "solutionHash"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "solved"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "submitGuess"
  ): TypedContractMethod<
    [_proof: BytesLike, _questId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BountyClaimed"
  ): TypedContractEvent<
    BountyClaimedEvent.InputTuple,
    BountyClaimedEvent.OutputTuple,
    BountyClaimedEvent.OutputObject
  >;
  getEvent(
    key: "QuestCreated"
  ): TypedContractEvent<
    QuestCreatedEvent.InputTuple,
    QuestCreatedEvent.OutputTuple,
    QuestCreatedEvent.OutputObject
  >;
  getEvent(
    key: "QuestSolved"
  ): TypedContractEvent<
    QuestSolvedEvent.InputTuple,
    QuestSolvedEvent.OutputTuple,
    QuestSolvedEvent.OutputObject
  >;

  filters: {
    "BountyClaimed(uint256,address)": TypedContractEvent<
      BountyClaimedEvent.InputTuple,
      BountyClaimedEvent.OutputTuple,
      BountyClaimedEvent.OutputObject
    >;
    BountyClaimed: TypedContractEvent<
      BountyClaimedEvent.InputTuple,
      BountyClaimedEvent.OutputTuple,
      BountyClaimedEvent.OutputObject
    >;

    "QuestCreated(uint256,uint256,bytes32)": TypedContractEvent<
      QuestCreatedEvent.InputTuple,
      QuestCreatedEvent.OutputTuple,
      QuestCreatedEvent.OutputObject
    >;
    QuestCreated: TypedContractEvent<
      QuestCreatedEvent.InputTuple,
      QuestCreatedEvent.OutputTuple,
      QuestCreatedEvent.OutputObject
    >;

    "QuestSolved(uint256)": TypedContractEvent<
      QuestSolvedEvent.InputTuple,
      QuestSolvedEvent.OutputTuple,
      QuestSolvedEvent.OutputObject
    >;
    QuestSolved: TypedContractEvent<
      QuestSolvedEvent.InputTuple,
      QuestSolvedEvent.OutputTuple,
      QuestSolvedEvent.OutputObject
    >;
  };
}
